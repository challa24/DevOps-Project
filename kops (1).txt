STEP-1: LAUNCH INSTANCE WITH T2.MICRO AND 20 GB SSD
STEP-2: INSTALL AWS CLI
		curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
		unzip awscliv2.zip
		sudo ./aws/install
		TO  CHECK VERSION: /usr/local/bin/aws --version
		TO SET PATH: vim .bashrc
				 export PATH=$PATH:/usr/local/bin/
				 source .bashrc
				 aws --version
STEP-3: INSTALL KOPS & KUBECTL
		curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
		wget https://github.com/kubernetes/kops/releases/download/v1.24.1/kops-linux-amd64
		PERMISSIONS: chmod +x kops-linux-amd64 kubectl
		MOVE FILES:  mv kubectl /usr/local/bin/kubectl
		MOVE FILES:  mv kops-linux-amd64  /usr/local/bin/kops
		TO SEE VERSION: kubectl version & kops version
STEP-4: CREATE IAM USER WITH ADMIN PERMISSIONS AND CONFIGURE IT IN ANY REGION WITH TABLE FORMAT
STEP-5: CREATE INFRA SETUP
		TO CREATE BUCKET: aws s3api create-bucket --bucket musta.k8s.local --region us-east-1
		TO ENABLE VERSION: aws s3api put-bucket-versioning --bucket musta.k8s.local --region us-east-1 --versioning-configuration Status=Enabled
		EXPORT CLUSTER DATA INTO BUCKET: export KOPS_STATE_STORE=s3://musta.k8s.local
		GENERATE-KEY: ssh-keygen	
		TO CREATE CLUSTER: kops create cluster --name musta.k8s.local --zones us-east-1a --master-size t2.medium --node-size t2.micro
		TO SEE THE CLUSTER: kops get cluster
		IF YOU WANT TO EDIT THE CLUSTER: kops edit cluster cluster_name
		TO RUN THE CLUSTER: kops update cluster --name musta.k8s.local --yes --admin
                TO DELETE THE CLUSTER: kops delete cluster --name praveen.k8s.local --yes 
STEP-6: CREATE PODS
		TO CREATE A POD: kops update cluster --name musta.k8s.local --yes --admin
		TO CHECK THE PODS: kubectl get pods
		TO CHECK THE POD IS RUNNING WHERE:  kubectl get pods -o wide
		TO CREATE A CONTIANER: 
========================
vim pod-nginx.yml

apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:                                                                4Hw1ft4WVDpKf0yKaeyAN65CfyAGjmD2R/KbJbdL
  containers:
  - image: nginx
    name: nginx
================
		TO DELETE EXISTING POD: kubectl delete pod nginx
		TO CREATE A POD: kubectl create -f pod-nginx.yml
		TO DEPLOY POD: we need to delete existing pod (kubectl delete pod nginx) & write the code for deployment

kubectl describe pod podname (used to get full information about pod used for debugging)
kubectl logs podname (used to get logs of the pod)
kubectl get all -A (used to get all resources)
 
============================================================
DEPLOYMENT  (AUTO HEALING)
if we create deployment--deployment will create Replica set --Replica set will create Pod(with the help of lables and selectors)

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80


kubectl apply -f deployment.yml

kubectl get deploy (used to get list of Deployments)

kubectl get rs (used to get list of Replica sets)    
		
		



